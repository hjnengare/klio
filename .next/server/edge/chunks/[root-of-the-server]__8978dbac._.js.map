{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["// AUTH BACKEND DISABLED - Middleware commented out for now\r\n// Uncomment when you want to enable Supabase authentication\r\n\r\nimport { NextResponse, type NextRequest } from 'next/server';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  // Passthrough - no authentication checks\r\n  return NextResponse.next({\r\n    request: {\r\n      headers: request.headers,\r\n    },\r\n  });\r\n}\r\n\r\n/* ORIGINAL AUTH MIDDLEWARE - COMMENTED OUT\r\n\r\nimport { createServerClient } from '@supabase/ssr';\r\nimport { NextResponse, type NextRequest } from 'next/server';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  let response = NextResponse.next({\r\n    request: {\r\n      headers: request.headers,\r\n    },\r\n  });\r\n\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return request.cookies.get(name)?.value;\r\n        },\r\n        set(name: string, value: string, options: any) {\r\n          request.cookies.set({\r\n            name,\r\n            value,\r\n            ...options,\r\n          });\r\n          response = NextResponse.next({\r\n            request: {\r\n              headers: request.headers,\r\n            },\r\n          });\r\n          response.cookies.set({\r\n            name,\r\n            value,\r\n            ...options,\r\n          });\r\n        },\r\n        remove(name: string, options: any) {\r\n          request.cookies.set({\r\n            name,\r\n            value: '',\r\n            ...options,\r\n          });\r\n          response = NextResponse.next({\r\n            request: {\r\n              headers: request.headers,\r\n            },\r\n          });\r\n          response.cookies.set({\r\n            name,\r\n            value: '',\r\n            ...options,\r\n          });\r\n        },\r\n      },\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: { user },\r\n  } = await supabase.auth.getUser();\r\n\r\n  // Protected routes - require authentication\r\n  const protectedRoutes = ['/home', '/profile', '/reviews', '/write-review', '/leaderboard'];\r\n  const isProtectedRoute = protectedRoutes.some(route =>\r\n    request.nextUrl.pathname.startsWith(route)\r\n  );\r\n\r\n  // Onboarding routes - require authentication\r\n  const onboardingRoutes = ['/interests', '/subcategories'];\r\n  const isOnboardingRoute = onboardingRoutes.some(route =>\r\n    request.nextUrl.pathname.startsWith(route)\r\n  );\r\n\r\n  // Auth routes - redirect to home if already logged in\r\n  const authRoutes = ['/login', '/register', '/onboarding'];\r\n  const isAuthRoute = authRoutes.some(route =>\r\n    request.nextUrl.pathname.startsWith(route)\r\n  );\r\n\r\n  // Redirect unauthenticated users from protected routes\r\n  if ((isProtectedRoute || isOnboardingRoute) && !user) {\r\n    const redirectUrl = new URL('/onboarding', request.url);\r\n    return NextResponse.redirect(redirectUrl);\r\n  }\r\n\r\n  // Redirect authenticated users from auth pages\r\n  if (isAuthRoute && user) {\r\n    // Check if onboarding is complete\r\n    try {\r\n      const { data: profile } = await supabase\r\n        .from('profiles')\r\n        .select('onboarding_step')\r\n        .eq('user_id', user.id)\r\n        .single();\r\n\r\n      if (profile?.onboarding_step === 'complete') {\r\n        return NextResponse.redirect(new URL('/home', request.url));\r\n      } else {\r\n        // Redirect to appropriate onboarding step\r\n        const step = profile?.onboarding_step || 'interests';\r\n        if (!request.nextUrl.pathname.startsWith(`/${step}`)) {\r\n          return NextResponse.redirect(new URL(`/${step}`, request.url));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking profile:', error);\r\n    }\r\n  }\r\n\r\n  return response;\r\n}\r\n\r\nEND ORIGINAL AUTH MIDDLEWARE */\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * - public folder\r\n     * - api routes\r\n     */\r\n    '/((?!_next/static|_next/image|favicon.ico|api|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\r\n  ],\r\n};\r\n"],"names":[],"mappings":"AAAA,2DAA2D;AAC3D,4DAA4D;;;;;;;AAE5D;AAAA;;AAEO,eAAe,WAAW,OAAoB;IACnD,yCAAyC;IACzC,OAAO,gMAAY,CAAC,IAAI,CAAC;QACvB,SAAS;YACP,SAAS,QAAQ,OAAO;QAC1B;IACF;AACF;AAqHO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}}]
}