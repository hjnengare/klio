// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type PagesPageConfig = {
  default: React.ComponentType<any> | ((props: any) => React.ReactNode | Promise<React.ReactNode> | never | void)
  getStaticProps?: (context: any) => Promise<any> | any
  getStaticPaths?: (context: any) => Promise<any> | any
  getServerSideProps?: (context: any) => Promise<any> | any
  getInitialProps?: (context: any) => Promise<any> | any
  /**
   * Segment configuration for legacy Pages Router pages.
   * Validated at build-time by parsePagesSegmentConfig.
   */
  config?: {
    amp?: boolean | 'hybrid' | string // necessary for JS
    maxDuration?: number
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    regions?: string[]
  }
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/auth/auth-code-error/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/auth-code-error">> = Specific
  const handler = {} as typeof import("../../src/app/auth/auth-code-error/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/business/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/business/[id]">> = Specific
  const handler = {} as typeof import("../../src/app/business/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/business/review/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/business/review">> = Specific
  const handler = {} as typeof import("../../src/app/business/review/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/claim-business/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/claim-business">> = Specific
  const handler = {} as typeof import("../../src/app/claim-business/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/complete/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/complete">> = Specific
  const handler = {} as typeof import("../../src/app/complete/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/deal-breakers/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/deal-breakers">> = Specific
  const handler = {} as typeof import("../../src/app/deal-breakers/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/discover/reviews/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/discover/reviews">> = Specific
  const handler = {} as typeof import("../../src/app/discover/reviews/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/events-specials/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/events-specials">> = Specific
  const handler = {} as typeof import("../../src/app/events-specials/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/for-you/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/for-you">> = Specific
  const handler = {} as typeof import("../../src/app/for-you/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/forgot-password/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/forgot-password">> = Specific
  const handler = {} as typeof import("../../src/app/forgot-password/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/home/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/home">> = Specific
  const handler = {} as typeof import("../../src/app/home/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/interests/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/interests">> = Specific
  const handler = {} as typeof import("../../src/app/interests/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/leaderboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/leaderboard">> = Specific
  const handler = {} as typeof import("../../src/app/leaderboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../src/app/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/onboarding/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/onboarding">> = Specific
  const handler = {} as typeof import("../../src/app/onboarding/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/profile">> = Specific
  const handler = {} as typeof import("../../src/app/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/register/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/register">> = Specific
  const handler = {} as typeof import("../../src/app/register/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/reset-password/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/reset-password">> = Specific
  const handler = {} as typeof import("../../src/app/reset-password/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/saved/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/saved">> = Specific
  const handler = {} as typeof import("../../src/app/saved/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/subcategories/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/subcategories">> = Specific
  const handler = {} as typeof import("../../src/app/subcategories/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/test-auth/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-auth">> = Specific
  const handler = {} as typeof import("../../src/app/test-auth/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/test-supabase/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-supabase">> = Specific
  const handler = {} as typeof import("../../src/app/test-supabase/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/trending/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/trending">> = Specific
  const handler = {} as typeof import("../../src/app/trending/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/write-review/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/write-review">> = Specific
  const handler = {} as typeof import("../../src/app/write-review/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/rate-limit/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/rate-limit">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/rate-limit/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/businesses/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/businesses">> = Specific
  const handler = {} as typeof import("../../src/app/api/businesses/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/deal-breakers/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/deal-breakers">> = Specific
  const handler = {} as typeof import("../../src/app/api/deal-breakers/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/interests/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/interests">> = Specific
  const handler = {} as typeof import("../../src/app/api/interests/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/seed/interests/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/seed/interests">> = Specific
  const handler = {} as typeof import("../../src/app/api/seed/interests/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/subcategories/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/subcategories">> = Specific
  const handler = {} as typeof import("../../src/app/api/subcategories/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/user/deal-breakers/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/user/deal-breakers">> = Specific
  const handler = {} as typeof import("../../src/app/api/user/deal-breakers/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/user/interests/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/user/interests">> = Specific
  const handler = {} as typeof import("../../src/app/api/user/interests/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/user/subcategories/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/user/subcategories">> = Specific
  const handler = {} as typeof import("../../src/app/api/user/subcategories/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/auth/callback/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/auth/callback">> = Specific
  const handler = {} as typeof import("../../src/app/auth/callback/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/pages/_app.tsx
{
  type __IsExpected<Specific extends PagesPageConfig> = Specific
  const handler = {} as typeof import("../../src/pages/_app.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/pages/_document.tsx
{
  type __IsExpected<Specific extends PagesPageConfig> = Specific
  const handler = {} as typeof import("../../src/pages/_document.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}



// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
